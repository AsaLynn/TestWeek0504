package com.example.think.zhihudemo.green.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.think.zhihudemo.green.entity.MsgGreenInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "msg_tb".
*/
public class MsgGreenInfoDao extends AbstractDao<MsgGreenInfo, Long> {

    public static final String TABLENAME = "msg_tb";

    /**
     * Properties of entity MsgGreenInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MsgId = new Property(0, Long.class, "msgId", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "title");
        public final static Property ImageUrl = new Property(2, String.class, "imageUrl", false, "image_url");
        public final static Property Id = new Property(3, int.class, "id", false, "id");
        public final static Property WebContent = new Property(4, String.class, "webContent", false, "web_content");
        public final static Property GoodCount = new Property(5, int.class, "goodCount", false, "good_count");
    }


    public MsgGreenInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MsgGreenInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"msg_tb\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: msgId
                "\"title\" TEXT," + // 1: title
                "\"image_url\" TEXT," + // 2: imageUrl
                "\"id\" INTEGER NOT NULL ," + // 3: id
                "\"web_content\" TEXT," + // 4: webContent
                "\"good_count\" INTEGER NOT NULL );"); // 5: goodCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"msg_tb\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MsgGreenInfo entity) {
        stmt.clearBindings();
 
        Long msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindLong(1, msgId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
        stmt.bindLong(4, entity.getId());
 
        String webContent = entity.getWebContent();
        if (webContent != null) {
            stmt.bindString(5, webContent);
        }
        stmt.bindLong(6, entity.getGoodCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MsgGreenInfo entity) {
        stmt.clearBindings();
 
        Long msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindLong(1, msgId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
        stmt.bindLong(4, entity.getId());
 
        String webContent = entity.getWebContent();
        if (webContent != null) {
            stmt.bindString(5, webContent);
        }
        stmt.bindLong(6, entity.getGoodCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MsgGreenInfo readEntity(Cursor cursor, int offset) {
        MsgGreenInfo entity = new MsgGreenInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // msgId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imageUrl
            cursor.getInt(offset + 3), // id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // webContent
            cursor.getInt(offset + 5) // goodCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MsgGreenInfo entity, int offset) {
        entity.setMsgId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImageUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.getInt(offset + 3));
        entity.setWebContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGoodCount(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MsgGreenInfo entity, long rowId) {
        entity.setMsgId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MsgGreenInfo entity) {
        if(entity != null) {
            return entity.getMsgId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MsgGreenInfo entity) {
        return entity.getMsgId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
